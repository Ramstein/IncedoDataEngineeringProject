AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'AWS CloudFormation template for SocialMediaImageAnalysisWithRekognitionAthena (SMIAWRA), Exploring The image of the Customer on Social Media using Amazon Rekognition and Amazon Athena'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Application Settings
        Parameters:
          - pApplicationName
      - Label:
          default: Twitter Settings
        Parameters:
          - pTwitterTermList
          - pTwitterLanguages
          - pTwitterAuthConsumerKey
          - pTwitterAuthConsumerSecret
          - pTwitterAuthToken
          - pTwitterAuthTokenSecret
      - Label:
          default: VPC and Instance Settings
        Parameters:
          - pVpcCIDR
          - pPublicSubnet1CIDR
          - pInstanceKeyName
    ParameterLabels:
      pInstanceKeyName:
        default: Instance Key
      pTwitterTermList:
        default: Twitter Term List
      pTwitterLanguages:
        default: Twitter Languages
      pTwitterAuthConsumerKey:
        default: Twitter Auth Consumer Key
      pTwitterAuthConsumerSecret:
        default: Twitter Auth Consumer Secret
      pTwitterAuthToken:
        default: Twitter Auth Token
      pTwitterAuthTokenSecret:
        default: Twitter Auth Token Secret
      pApplicationName:
        default: Application Name
      pVpcCIDR:
        default: VPC CIDR
      pPublicSubnet1CIDR:
        default: Public Subnet1 CIDR

Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1: # Virginia
      AMI: ami-a4c7edb2
    us-east-2: # Ohio
      AMI: ami-8a7859ef
    us-west-1: # North California
      AMI: ami-327f5352
    us-west-2: # Oregon
      AMI: ami-6df1e514
    eu-west-1: # Ireland
      AMI: ami-d7b9a2b1
    eu-west-2: # London
      AMI: ami-ed100689
    eu-central-1: # Frankfurt
      AMI: ami-82be18ed
    sa-east-1: # Sao Paulo
      AMI: ami-87dab1eb
    ap-southeast-1: # Singapore
      AMI: ami-77af2014
    ap-southeast-2: # Sydney
      AMI: ami-10918173
    ap-northeast-1: # Tokyo
      AMI: ami-3bd3c45c
    ap-northeast-2: # Seoul
      AMI: ami-e21cc38c
    ca-central-1: # Canada
      AMI: ami-a7aa15c3
    ap-south-1: # Mumbai
      AMI: ami-47205e28

Parameters:
  pInstanceKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The name of the private key to use for SSH access."

  pTwitterTermList:
    Description: List of terms for twitter to listen to
    Type: String
    Default: "'money', 'price', 'btc'"


  pTwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: String
    Default: "'en'"

  pTwitterAuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String

  pTwitterAuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String

  pTwitterAuthToken:
    Description: Access Token Secret for calling twitter
    Type: String

  pTwitterAuthTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String

  pApplicationName:
    Description: Name of the application deploying for Exploring images on social media using Amazon Rekognition and Amazon Athena
    Type: String
    Default: SocialMediaImageAnalysisWithRekognitionAthena

  pVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.193.0.0/16

  pPublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.193.10.0/24


Resources:

  rTweetsEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Twitter Reader
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: rTweetsEC2SecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      - Key: Project
        Value: !Join ['-', [!Ref 'pApplicationName', !Ref 'AWS::Region']]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  rSMIAWRAOfCustomerEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: smiawraofcustomer-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'firehose:DeleteDeliveryStream'
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                    - 'firehose:UpdateDestination'
                Resource: '*'
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
          - Key: Name
            Value: !Ref pApplicationName

  rInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref pApplicationName

  rInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref rInternetGateway
          VpcId: !Ref rVPC

  rPublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref rVPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref pPublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${pApplicationName} Public Subnet (AZ1)

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref rVPC
        Tags:
            - Key: Name
              Value: !Sub ${pApplicationName} Public Routes

  rDefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: rInternetGatewayAttachment
      Properties:
          RouteTableId: !Ref rPublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref rInternetGateway

  rPublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref rPublicRouteTable
          SubnetId: !Ref rPublicSubnet1

  rTweetsBucket:
    Type: AWS::S3::Bucket

  rTwitterStreamingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref rSMIAWRAOfCustomerEC2Role

  rTwitterStreamingReaderServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref 'AWS::Region', AMI]  # Lookup the AMI in the region map
      InstanceType: t2.medium                                         # Any size is fine
      KeyName: !Ref pInstanceKeyName                                   # Use the keypair from the input parameters
      SecurityGroupIds:
      - !Ref rTweetsEC2SecurityGroup
      IamInstanceProfile: !Ref rTwitterStreamingInstanceProfile
      SubnetId: !Ref rPublicSubnet1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'pApplicationName', 'DeployGroup', !Ref 'AWS::Region']]
      - Key: Project
        Value: !Join ['-', [!Ref 'pApplicationName', !Ref 'AWS::Region']]
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #!/bin/bash -ex
            set -e

            sleep 60

            yum clean all

            yum -y install nodejs npm --enablerepo=epel

            npm config set registry http://registry.npmjs.org/

            npm install node-sass request@2.81.0

            echo "var twitter_config = module.exports = {
            twitter: {
                consumer_key: '${TwitterConsumerKey}',
                consumer_secret: '${TwitterConsumerSecret}',
                access_token: '${TwitterAccessToken}',
                access_token_secret: '${TwitterTokenSecret}'
              },
            topics: [${TwitterTerms}],
            languages: [${pTwitterLanguages}],
            kinesis_delivery: '${KinesisIngestionFirehose}'
            }" > /home/ec2-user/twitter_reader_config.js

            wget https://s3.amazonaws.com/serverless-analytics/SocialMediaAnalytics-blog/SocialAnalyticsReader.tar

            tar --warning=no-unknown-keyword -xf SocialAnalyticsReader.tar -C /home/ec2-user/
            cd /home/ec2-user
            nohup node twitter_stream_producer_app.js &
            echo "Service started."
          - {
              TwitterTerms: !Ref pTwitterTermList,
              pTwitterLanguages: !Ref pTwitterLanguages ,
              TwitterConsumerKey: !Ref pTwitterAuthConsumerKey,
              TwitterConsumerSecret: !Ref pTwitterAuthConsumerSecret,
              TwitterAccessToken: !Ref pTwitterAuthToken,
              TwitterTokenSecret: !Ref pTwitterAuthTokenSecret,
              KinesisIngestionFirehose: !Ref rIngestionFirehoseStream
            }

  rIngestionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'raw/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  rEntitiesFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'entities/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  rSentimentFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'sentiment/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

# SMIAWRAOfCustomer Change
  rRekognitionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'media/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  IngestionFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'

  IngestionFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TweetIngestionFirehosePolicy
      Roles:
        - !Ref IngestionFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref rTweetsBucket, '/*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  rSMIAWRAOfCustomerLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: SMIAWRAOfCustomerLambdaFunctionExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchAccess
            Effect: Allow
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Access
            Effect: Allow
            Action: ['*']
            Resource: [!GetAtt [rTweetsBucket, Arn],
                      !Join ['', [!GetAtt [rTweetsBucket, Arn], /*]]]
          - Sid: FirehoseAccess
            Effect: Allow
            Action: ['firehose:ListDeliveryStreams', 'firehose:PutRecord', 'firehose:PutRecordBatch']
            Resource: [!GetAtt [rSentimentFirehoseStream, Arn],
                       !GetAtt [rEntitiesFirehoseStream, Arn],
                       !GetAtt [rRekognitionFirehoseStream, Arn]]
          - Sid: ComprehendAccess
            Effect: Allow
            Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment']
            Resource: '*'
          - Sid: RekognitionAccess
            Effect: Allow
            Action: ['rekognition:DetectLabels','rekognition:DetectFaces','rekognition:RecognizeCelebrities','rekognition:DetectModerationLabels','rekognition:DetectText']
            Resource: '*'

  rSMIAWRAOfCustomerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3://aws-bigdata-blog/artifacts/EyeOfCustomer/labelimage.zip # TODO
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 900
      Role:
        Fn::GetAtt:
        - rSMIAWRAOfCustomerLambdaFunctionRole
        - Arn
      Environment:
        Variables:
          SENTIMENT_STREAM: !Ref rSentimentFirehoseStream
          ENTITY_STREAM: !Ref rEntitiesFirehoseStream
          REKOGNITION_STREAM: !Ref rRekognitionFirehoseStream
          BUCKET: !Ref rTweetsBucket
          IMAGEKEY_PREFIX: tmp/images/
Outputs:
  SSHCommand:
    Description: To establish an SSH tunnel with the twitter stream reader, type the following command.
    Value: !Join ['', [ssh -i ~/, !Ref 'pInstanceKeyName', .pem ec2-user@, !GetAtt [
          rTwitterStreamingReaderServer, PublicDnsName]]]

  EC2InstanceConsoleURL:
    Description: URL to ec2 EC2InstanceConsoleURL
    Value: !Join ['', ['https://', !Ref "AWS::Region", '.console.aws.amazon.com/ec2/home?region=', !Ref "AWS::Region", '#Instances:search=', !Ref 'rTwitterStreamingReaderServer']]

  LambdaFunctionConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join ['', ['https://console.aws.amazon.com/lambda/home?region=', !Ref "AWS::Region", '#/functions/', !Ref "rSMIAWRAOfCustomerLambda", '?tab=graph']]

  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join ['', ['https://s3.console.aws.amazon.com/s3/buckets/', !Ref 'rTweetsBucket', '/?region=', !Ref "AWS::Region", '&tab=overview']]

  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Join ['', ['s3://', !Ref 'rTweetsBucket', /raw/]]

  TwitterEntitiesLocation:
    Description: S3 Twitter Entities location.
    Value: !Join ['', ['s3://', !Ref 'rTweetsBucket', /entities/]]

  TwitterSentimentLocation:
    Description: S3 Twitter Sentiment location.
    Value: !Join ['', ['s3://', !Ref 'rTweetsBucket', /sentiment/]]

  TwitterMediaLabelsLocation:
    Description: S3 Twitter Media Labels location.
    Value: !Join ['', ['s3://', !Ref 'rTweetsBucket', /media/]]